#include<iostream>
#include<vector>

const int MAX_V  = 100000;
const int MAX_E  = 500000;
int r;
long long INF = 10e15;
//??????fromk???????????????to???????????????cost??????
struct edge {int from, to, cost; };

edge es[MAX_E];

long long d[MAX_V];   //???????????¢
int V, E;       //V???????????°???E???????????°

//s???????????????????????????????????????????????¢????±???????
void shortest_path(int s) {
  for(int i = 0; i < V; i++) d[i] = INF;
  d[s] = 0;
  while (true) {
    bool update = false;
    for(int i = 0; i < E; i++) {
      edge e = es[i];
      if (d[e.from] != INF &&  d[e.to] > d[e.from] + e.cost) {
        d[e.to] = d[e.from] + e.cost;
        update = true;
      }
    }
    if(!update) break;
  }
}

using namespace std;

int main() {
  cin >> V >> E >> r;

  for(int i = 0; i < E; i++) {
    int s, t, d;
    cin >> s >> t >> d;
    es[i].from = s;
    es[i].to = t;
    es[i].cost = d;
  }

  shortest_path(r);

  for(int i = 0; i < V; i++) {
    if(d[i] == INF) {
      cout << "INF" << endl;
    }else {
      cout << d[i] << endl;
    }
  }

  return 0;
}