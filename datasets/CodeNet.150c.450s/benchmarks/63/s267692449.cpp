#include <iostream>
#include <queue>
#include <vector>
#include <map>

using namespace std;

#define INF 1e+9

struct Edge{
    int to;
    int weight;
};


vector<int> dijkstra(vector<vector<Edge>>& G, int start) {

    const int V = G.size();
    vector<int> res(V,INF);
    
    priority_queue< pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>> >  pq; // TODO
    pq.push( make_pair(0,start) );

    while( !pq.empty() ){
       
	int s = pq.top().first;
	int v = pq.top().second;
	pq.pop();
	
	// ????????¢?´¢?????????????????????
	if( res[v] != INF ) continue;
	
	// ????????????????????¢?´¢????????°????????????????¢???????
	res[v] = s;
	// v ??????????????????????????????????????????
	// ??????????????¢?´¢???????????\????????????
	for(int i=0; i<G[v].size(); i++) {
	    int tgt = G[v][i].to; // ?????????
	    int sco = s + G[v][i].weight;
	    if( res[tgt] == INF )
		pq.push( make_pair(sco,tgt) );
	}
    }
    return res;
}



int main () {
    int V,E,r;
    cin >> V >> E >> r;
    
    vector<vector<Edge>> AdjList(V);

    for(int i=0; i<E; i++) {
	int s,t,w;
	cin >> s >> t >> w;
	AdjList[s].push_back( Edge{t,w} );
    }

    vector<int> sp = dijkstra(AdjList,r);
    for(auto res : sp) {
	if( res == INF )
	    cout << "INF" << endl;
	else
	    cout << res << endl;
    }

    return 0;
}