#include <iostream>
#include <queue>
#include <vector>
#include <climits>
using namespace std;

#define MAX_E 500001
#define MAX_V 100001
#define INF INT_MAX

struct edge {
    int to;
    int cost;
};
vector<edge> G[MAX_V];

/*
 * ?¬¬????????°:????????????????¬¬????????°??§??¨???????????????????????§???cost
 * ?¬¬????????°:??°????????????
 */
typedef pair<int, int> P;

//???????????????????????????????????????????°?cost???????´??????????
int cost[MAX_V];

void Dijkstra(int start) {
    
    //????????????????????\??????cost???????????????????????????
    priority_queue<P, vector<P>, greater<P> > que;
    
    //?????????
    fill(cost, cost + MAX_V, INF);
    cost[start] = 0;
    que.push(P(0, start));
    
    while(!que.empty()) {
        P p = que.top(); que.pop();
        
        //v?????°????????????
        int v = p.second;
        
        /*
         * ?????¨?????§????±???????????????????v?????§???????°??????¨???start??????v?????§???????????????????????????
         * ???????????¶?????????????????´??????v?????¢????¨??????????????¢???????????????§??????
         */
        if (cost[v] < p.first) continue;
        
        /*
         * v??????????????????????????????e.to???????????????
         * ?????¨?????§????±???????????????????????°?????????´??°????????§????????°??´??°????????????
         * ??´??°????????§????????°???e.to???????????????????????????????????¨??????cost?????´??°???????????????
         * ??????????????\???????????????e.to???????´???????
         */
        for (int i = 0; i < G[v].size(); i++) {
            edge e = G[v][i];
            if (cost[e.to] > cost[v] + e.cost) {
                cost[e.to] = cost[v] + e.cost;
                que.push(P(cost[e.to], e.to));
            }
        }
    }
}

int main( ){
    
    int i, V, E, r, u, v, c;
    edge tmp;
    cin >> V >> E >> r;

    for (i = 0; i < E; i++) {
        cin >> u >> v >> c;
        tmp.cost = c;
        tmp.to = v;
        G[u].push_back(tmp);
    }
    
    Dijkstra(r);
    
    for (i=0; i<V; i++) {
        if (cost[i] == INF) {
            cout << "INF" << endl;
        }else{
            cout << cost[i] << endl;
        }
    }
    
    return 0;
}