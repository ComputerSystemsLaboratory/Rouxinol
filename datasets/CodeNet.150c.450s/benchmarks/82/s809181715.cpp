#include <string>
#include <iostream>

using namespace std;

class Dice
{
public:
	static const int SURFACE_NUM = 6; // ?????????????????¢??°
	static const int DIR_NUM = 4; // ?????¢?????????????????°
	static const int ROUND_NUM = 4; // ?????¢????????¢?????°
	enum DIR { N, W, S, E }; // ?????¢??????
private:
	static const int rotate_table[DIR_NUM][ROUND_NUM]; // ?????¢??¨????????¢????????\???????????????
	static const int front_rotate_table[ROUND_NUM]; // ?????¢??¨?????¢????????????
	int surface_numbers[SURFACE_NUM]; // ??¢?????°???

public:
	Dice(int number[SURFACE_NUM])
	{
		// ??¢?????°???????????????
		for (int i = 0; i < SURFACE_NUM; i++)
			surface_numbers[i] = number[i];
	}
private:
	void rotate(const int table[ROUND_NUM])
	{
		// ????????????????????§????????¢????????¢?????????
		int backup = surface_numbers[table[0]];
		for (int i = 0; i < ROUND_NUM - 1; i++)
			surface_numbers[table[i]] = surface_numbers[table[i + 1]];
		surface_numbers[table[ROUND_NUM - 1]] = backup;
	}
public:
	void rotate(DIR direction)
	{
		// ?????¢????????\????????????????????§?????????
		rotate(rotate_table[direction]);
	}
	int answerLeftSurface(int top_number, int front_number)
	{
		// ?????¢?????°?????????????????§?????¢????????¢?????????
		for (int i = 0; i < ROUND_NUM; i++) {
			// ????????¢
			if (getTopNumber() == top_number) break;
			rotate(N);
		}
		if (getTopNumber() != top_number) {
			for (int i = 0; i < ROUND_NUM; i++) {
				// ?¨??????¢
				if (getTopNumber() == top_number) break;
				rotate(W);
			}
		}
		// ?????¢?????°?????????????????§?????¢????????¢?????????
		for (int i = 0; i < ROUND_NUM; i++) {
			if (surface_numbers[1] == front_number) break;
			rotate(front_rotate_table);
		}
		// ??´??¢???????????????
		return surface_numbers[2];
	}
	int getTopNumber() { return surface_numbers[0]; }
};
// ?????¢???????????????????????¢????????¢????????????????????????????????????(?????¢??¨)
const int Dice::rotate_table[DIR_NUM][ROUND_NUM]
{
	{ 0, 1, 5, 4 },
	{ 0, 2, 5, 3 },
	{ 0, 4, 5, 1 },
	{ 0, 3, 5, 2 }
};
// ????????¢????????¢????????????????????????????????????(?????¢??¨)
const int Dice::front_rotate_table[ROUND_NUM] { 1, 2, 4, 3 };
int main()
{
	int nums[Dice::SURFACE_NUM] = { 0 };
	for (int i = 0; i < Dice::SURFACE_NUM; i++)
		cin >> nums[i];
	Dice dice(nums);
	
	int q = 0, top = 0, front = 0;
	cin >> q;
	for (int i = 0; i < q; i++) {
		cin >> top >> front;
		cout << dice.answerLeftSurface(top, front) << endl;
	}
	return 0;
}