#include <iostream>
#include <algorithm>
#include <iomanip>
#include <cmath>
#include <vector>
#include <sstream>
#include <string>
#include <cstdio>
#include <stack>
#include <queue>
#include <list>
#include <numeric> //accumulate
//#include <unordered_map> //???????????\??¢??°

using namespace std;

//???????????°??????TEST????????????????????¬???????????????????????????????????¢????????????
#define TEST //*******************************************************************************************************************************************

//?????????????????¨??§?????\????????????????????????????????°?????????????¨???????????????????dout???????????????????????§???????????¬??????????????????????????????????????????
#ifdef TEST
    #define dout cout
#else
    stringstream dummy; //???????????°??????dout?????????????????????????????????
    #define dout dummy.str(""); dummy.clear(stringstream::goodbit); dummy //dummy?????????????????????????????????????????¨?????¢?????¢???????????????
    //???????????¨??????????????????goodbit?????????????????????????????¨???????????´????????????????????????????????¨?????°?????????????????§???????????????????????????????????? http://d.hatena.ne.jp/linden/20060427/p1
#endif


#define disp(A) dout << #A << " = " << (A) << endl;

#define SIZE 67108864 //4^13 ????????????????????????1??¨???????????§???????????????4^12*2????????????2^25=33554432??§??????

int key[128];
bool dic[SIZE];


int Hash(string str) { //????????????4????????§??°??????????????????
    const char *c = str.c_str();
    
    int hashCode = 1;
    
    while(*c) {
//        disp(*c)
        hashCode *= 4;
        hashCode += key[*c];
//        disp(hashCode)
        c++;
    }
    
    return hashCode;
}

int main(void) {

    key['A']=0;
    key['C']=1;
    key['G']=2;
    key['T']=3;

    size_t N;
    cin >> N;
    
    string order;
    string str;
    
    while(N--) {
        cin >> order >> str;
        
        if(order[0]=='i') {
            dic[Hash(str)]=1;
        }
        else {
            cout << ( dic[Hash(str)] ? "yes" : "no" ) << endl;
        }
    }
    
    
    return 0;
}