/*
AOJ 0558 Cheese

?¢???????H * W?????°?????????N????\¶?????\?????????????????§??¬??????1-N????\¶????????????????????????????´????????????????????????\???????\¶??????
???????????????????????????????§???¶???1?????????????????\???????\¶?????????????¢????1???????????\????????????????¬???????
????????????????????¬????????§??????????????????????\¶??????
????????????????????°??°????????????????¢????????????????????\???????????????¶??´1????????????????¢??????????????????°???
??°??°??\????????¶???????????°??\??\???????\¶??????????\¶?????¶??´?????????????????????????\¶???????°???¨??¶???

?????\????¬¬??????????????´??°H(1 <= H <= 1000)???W(1 <= W <=1000)???N(1 <= N <= 9)???
??????H???W????????°?????? ???.???????????°??? ???X??????????¢??????????S?????????????´???? 1-N??£??¨??¬??????1-N????\¶????????\??????
 */
#include <assert.h>
#include <ctype.h>
#include <float.h>
#include <limits.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>

#include <algorithm>
#include <complex>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
using namespace std;

#define SZ(a) (int)(a).size()
#define FOR(i,a,b) for (int i=(a); i<=(b); ++i)
#define REP(i,n) for (int i=0; i<(n); ++i)
#define ALL(c) c.begin(), c.end()
#define CLR(c,n) memset(c, n, sizeof(c))
#define TR(it, c) for(typeof(c.begin()) it = c.begin();it != c.end(); ++it)
#define CONTAIN(it, c) (c.find(it) != c.end())
typedef vector<int> VI;
typedef pair<int, int> PII;
template <class T> void checkmin(T &a, T b) { if (b<a) a=b; }
template <class T> void checkmax(T &a, T b) { if (b>a) a=b; }

const int N=1024;
int h, w, n;
char b[N][N];
int dist[N][N];
int tx[10], ty[10];
int dx[4] = { -1, 0, 1, 0 };
int go(int x1, int y1, int x2, int y2) {
  CLR(dist, -1);
  dist[x1][y1] = 0;
  queue<PII> q;
  q.push(PII(x1, y1));
  while (!q.empty() && dist[x2][y2] == -1) {
    x1 = q.front().first, y1 = q.front().second;
    q.pop();
    REP(dir, 4) {
      int x = x1 + dx[dir], y = y1 + dx[dir^1];
      if (x < 0 || x >= h || y < 0 || y >= w) continue;
      if (dist[x][y] != -1 || b[x][y] == 'X') continue;
      dist[x][y] = dist[x1][y1] + 1;
      q.push(PII(x, y));
    }
  }
  return dist[x2][y2];
}

int main(int argc, char *argv[]) {
  while (scanf("%d%d%d", &h, &w, &n) == 3) {
    REP(i, h) scanf("%s", b[i]);
    REP(i, h) REP(j, w) {
      if (b[i][j] == 'S') tx[0] = i, ty[0] = j;
      else if (b[i][j] >= '1' && b[i][j] <= '9') {
        tx[b[i][j]-'0'] = i;
        ty[b[i][j]-'0'] = j;
      }
    }
    int ans = 0;
    REP(i, n) ans += go(tx[i], ty[i], tx[i+1], ty[i+1]);
    printf("%d\n", ans);
  }
}