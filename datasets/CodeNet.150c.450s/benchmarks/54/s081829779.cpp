/**
 * ?????????????´¢

??????????????? W ??¨?????? T ????????????????????????T ??????????????? W
?????°???????????????????????°?????????????????????????????????

?????? T ????????????????????????????????????????????§????????????????????????????????? Ti
??¨???????????????????????? Ti ?????????????????? W ??¨??????????????????????????°??????????????????

???????????§????????¨?°???????????????\???????????????

Constraints
W????????????????????????10????¶????????????????
T??????????????????????????????????????????1000????¶????????????????
Input
?????????????????? W ????????????????????????

?¶???????????????°????????????????????£??????????????????????????????END_OF_TEXT
??¨??????????????????????????????????????????????????????

Output
?????? W ?????°???????????????????????????

Sample Input
computer
Nurtures computer scientists and highly-skilled computer engineers
who will create and exploit "knowledge" for the new era.
Provides an outstanding computer environment.
END_OF_TEXT
Sample Output
3
 */

#include <iostream>
#include <sstream>
#include <locale>
#include <algorithm>
#include <vector>

/**
 * split a string into a vector at a Delimiter
 * @param   str         sting to be splitted
 * @param   Delimiter
 * @return              vector of splitted strings
 */
std::vector<std::string> splitString(std::string str, char Delimiter) {
  std::vector<std::string> v;
  std::stringstream ss(str);
  std::string Token;

  while (getline(ss, Token, Delimiter)) {
    v.push_back(Token);
  }

  return v;
}

int main(int argc, char const *argv[]) {
  std::string W, T;
  getline(std::cin, W);
  std::transform(W.begin(), W.end(), W.begin(), tolower);
  unsigned int Count = 0;

  while (true) {
    getline(std::cin, T);
    if (T == "END_OF_TEXT") {
      break;
    } else {
      std::transform(T.begin(), T.end(), T.begin(), tolower);
      std::vector<std::string> vT = splitString(T, ' ');
      
      for (const auto& Token : vT) {
        if (Token == W) {
          Count++;
        }
      }
    }
  }
  std::cout << Count << std::endl;
  return 0;
}