#include <cstdio>
#include <algorithm>
#include <climits>
using namespace std;

const int SIZE = 1 << 17; // 2^17 = 131072
template<typename T>
struct segtree {
    // ?????????????????????
    T node[2*SIZE], I;

    // ????????¬????????§??? (update, query ??? 2 ???????????????)
    T (*upd_f)(T, T), (*qry_f)(T, T);

    // ???????????¨?????????????????????????????¨?????? node ??????????????§?????????
    segtree(T (*op1)(T, T), T (*op2)(T, T), T X) {
        upd_f = op1;
        qry_f = op2;
        I = X;
        fill(node, node+2*SIZE, I);
    }

    // ??´??? idx ?????? val ????????? (upd_f ?????¨?????? update)
    void update(int idx, T val) {
        idx += SIZE - 1;
        node[idx] = upd_f(node[idx], val);
        while(idx > 0) {
            // ????????¨?????? qry_f ??????????????¨?????¨????????????
            idx = (idx - 1) / 2;
            node[idx] = qry_f(node[2*idx+1], node[2*idx+2]);
        }
    }

    // ???????????? [a, b) ?????????????????¨???????????????
    // (qry_f ?????¨????????????)
    T query(int a, int b, int l=0, int r=SIZE, int k=0) {
        if(b <= l || r <= a) return I;
        if(a <= l && r <= b) return node[k];
        int mid = (l + r) / 2;
        T vl = query(a, b, l, mid, 2*k+1);
        T vr = query(a, b, mid, r, 2*k+2);
        return qry_f(vl, vr);
    }
};

int add(int a, int b) {return a+b;}
int main() {
    segtree<int> seg(add, add, 0);
    int N, Q; scanf("%d%d", &N, &Q);
    for(int i=0; i<Q; i++) {
        int c, x, y; scanf("%d%d%d", &c, &x, &y); x--;
        if(c == 0) seg.update(x, y);
        else printf("%d\n", seg.query(x, y));
    }
    return 0;
}