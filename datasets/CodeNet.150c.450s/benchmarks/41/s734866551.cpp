#include <iostream>
#include <queue>
#include <vector>
#include <climits>
using namespace std;

/*
 * ??\??????warshallfloyd??????????????°??????
 * ??°?????????[?????????i] - [?????????j]????????????????????¢????±?????????¢??°
 * ??\?????¨?????????weight[NODE_NUM][NODE_NUM]?????¨??????
 * ?????????????????????????????¢???weight[i][i]??????0?????\??£????????????
 * [?????????i] - [?????????j]???????????\?¶?????????????????????´??????INF???????´??????????
 */

#define NODE_NUM 101
#define INF INT_MAX

int weight[NODE_NUM][NODE_NUM];

/*
 * ??????????????????????????????????????´?????????-1?????????
 * n:?????????????????°
 */
int WarshallFloyd(int n){
    
    for(int k=0; k < n; k++) {
        for(int i=0; i < n; i++) {
            for(int j=0; j < n; j++) {
                if(weight[i][k] != INF && weight[k][j] != INF)
                    weight[i][j] = min(weight[i][j], weight[i][k] + weight[k][j]);
            }
        }
    }
    
    //????????????????????????0??????????????????????????´??????????????????????????????????????????
    for(int v = 0; v < n; v++){
        if(weight[v][v] < 0) return -1;
    }
    
    return 1;
}

int main( ){
    
    int i, V, E, u, v, c;
    int rtn;
    cin >> V >> E;
    
    //????????????????????????0???????????\??????INF??¨??????
    for (int i = 0; i < V; i++) {
        for (int j =0; j < V; j++) {
            if(i == j) weight[i][j] = 0;
            else weight[i][j] = INF;
        }
    }

    for (i = 0; i < E; i++) {
        cin >> u >> v >> c;
        weight[u][v] = c;
    }
    
    rtn = WarshallFloyd(V);
    if (rtn == -1) {
        cout << "NEGATIVE CYCLE" << endl;
        return 0;
    }
    
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if(weight[i][j] == INF){
                cout << "INF";
            }else{
                cout << weight[i][j];
            }
            if (j < V-1) {
                 cout << " ";
            }
            else{
                cout << endl;
            }
        }
    }
    
    return 0;
}