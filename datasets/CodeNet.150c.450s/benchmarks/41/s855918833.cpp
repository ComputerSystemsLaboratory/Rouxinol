// GRL_1_A????????????
// ????????????????????? + ????????????????????????

#include <iostream>
#include <cstdio>
#include <string>
#include <cstring>
#include <deque>
#include <list>
#include <queue>
#include <stack>
#include <vector>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <complex>
#include <cmath>
#include <limits>
#include <climits>
#include <ctime>
using namespace std;

#define rep(i,a,n) for(int i=a; i<n; i++)
#define repr(i,a,n) for(int i=a; i>=n; i--)
#define pb(a) push_back(a)
#define fr first
#define sc second
#define INF INT_MAX

#define X real()
#define Y imag()
#define EPS (1e-10)
#define EQ(a,b) (abs((a) - (b)) < EPS)
#define EQV(a,b) ( EQ((a).X, (b).X) && EQ((a).Y, (b).Y) )
#define LE(n, m) ((n) < (m) + EPS)
#define GE(n, m) ((n) + EPS > (m))

typedef vector<int> VI;
typedef vector<VI> MAT;
typedef pair<int, int> pii;
typedef long long int ll;

typedef complex<double> P;
typedef pair<P, P> L;
typedef pair<P, double> C;

int dy[]={0, 0, 1, -1};
int dx[]={1, -1, 0, 0};
int const MOD = 1000000007;

// ????????¨???????????????????¨???????????§???????
struct Edge {
    int to, cost;
    Edge(int s, int d) : to(s), cost(d) {}
};

// 1??????????????????????????????????????±????????????????????????????????? vector
// Edges????????????????????????????????????????????°??????????????????
typedef vector<Edge> Edges;

// ???????????±??????????????? vector
// Graph??????????????????????????°?????????????????§??? V ??§?????????
typedef vector<Edges> Graph;

vector< vector<int> > warshall(Graph &G) {
    int V = G.size();
    vector< vector<int> > d(V);
    rep(i,0,V) rep(j,0,V) {
        if(i == j) d[i].push_back(0);
        else d[i].push_back(INF);
    }

    rep(i,0,V) rep(j,0,G[i].size()) {
        Edge e = G[i][j];
        d[i][e.to] = e.cost;
    }

    rep(k,0,V) rep(i,0,V) rep(j,0,V)
        if(d[i][k] != INF && d[k][j] != INF)
            d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
    return d;
}

namespace std {
    bool operator<(const P a, const P b) {
        return a.X != b.X ? a.X < b.X : a.Y < b.Y;
    }
}

int main() {
    int V, E;
    cin >> V >> E;
    Graph G(V);
    int s, t, d;
    rep(i,0,E) {
        cin >> s >> t >> d;
        G[s].push_back(Edge(t,d));
    }
    vector< vector<int> > ans = warshall(G);
    bool minus = false;
    rep(i,0,V) if(ans[i][i] < 0) minus = true;

    /*
    rep(i,0,V) {
        rep(j,0,V) {
            if(ans[i][j] >= INF) cout << "INF ";
            else printf("%3d ", ans[i][j]);
        }
        cout << endl;
    }
    */

    if(minus) cout << "NEGATIVE CYCLE" << endl;
    else {
        rep(i,0,V) {
            rep(j,0,V) {
                if(j == 0) {
                    (ans[i][j] >= INF) ? cout << "INF" : cout << ans[i][j];
                }
                else {
                    (ans[i][j] >= INF) ? cout << " INF" : cout << " " << ans[i][j];
                }
            }
            cout << endl;
        }
    }
    return 0;
}