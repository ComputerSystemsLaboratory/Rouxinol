#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>
#include <map>
#include <string>
#include <cstdio>
#include <cstdlib>
#include <ctime>


#ifndef _USEFUL_MACROS_
#define _USEFUL_MACROS_
#define INF INT_MAX/3
#define N_PRIME 1000000007
#define FOR(i,a,b) for (int i=(a);i<(b);i++)
#define RFOR(i,a,b) for (int i=(b)-1;i>=(a);i--)
#define REP(i,n) for (int i=0;i<(n);i++)
#define RREP(i,n) for (int i=(n)-1;i>=0;i--)
#define OUTPUT_DEBUG
#ifdef OUTPUT_DEBUG
#define debug(x) cout<<#x<<": "<<x<<endl
#else
#define debug(x) do{}while(false)
#endif
#endif 

using namespace std;

class UnionFind{
public:
    UnionFind(int max_n){
        _max_n = max_n+1;
        parent = (int*)malloc(_max_n * sizeof(int));
        rank = (int*)malloc(_max_n * sizeof(int));
        
        init();
    }
    
    ~UnionFind(){
        free(parent);
        free(rank);
    }
    
    void init(){
        REP(i,_max_n){
            parent[i] = i;
            rank[i] = 0;
        }
    }
    
    // ??´??°n???????????¢???
    int getParent(int n){
        if( parent[n] == n ){
            return n;
        }else{
            parent[n] = getParent(parent[n]);
            return parent[n];
        }
    }
    
    // ??´??°n,m???????????????????±????????????????true
    bool same(int n,int m){
        return getParent(n) == getParent(m);
    }
    
    // ??´??°n,m????±?????????????????????£?????????
    void unite(int n,int m){
        n = getParent(n);
        m = getParent(m);
        
        if( n == m )return; // ???????????£???
        
        if( rank[n] < rank[m] ){
            parent[n] = m;  // ??????????????±???????????????????????????
        }else{
            parent[m] = n;  // ??????????????±???????????????????????????
            
            // ????????±???????????±????????±??????????????§
            if( rank[n] == rank[m] )
                rank[n]++;
        }
    }
    
private:
    int _max_n;
    int *parent;    // parent[i]:   ??´??°i???????????´??°
    int *rank;      // rank[i]  :   ??´??°i?????±???
};

int main(void){
    int n,q;
    UnionFind uf(10000);
    
    cin >> n >> q;
    REP(i,q){
        int a,b,c;
        cin >> a >> b >> c;
        
        if( a == 0 ){
            uf.unite(b,c);
        }else{
            cout << (uf.same(b,c)?1:0) << endl;
        }
    }
    
    
    
    return 0;
}