#include <bits/stdc++.h>

using namespace std;


template<typename T>
class UF
{
public:
	UF() {
		size = 0;
	}

	//???????????\??????
	void push( T a ) {
		M[a] = size;
		V.push_back( size );
		rank.push_back( 0 );
		C.push_back( 1 );
		size++;
	}

	//????????°??????????????????
	void unite( T a, T b ) {
		long long int x = find( M[a] );
		long long int y = find( M[b] );
		if( x == y )return;
		if( rank[x] < rank[y] ) {
			V[x] = y;
			C[y] += C[x];
		} else {
			V[y] = x;
			C[x] += C[y];
			if( rank[x] == rank[y] )rank[x]++;
		}
	}

	void merge( T a, T b ) {
		unite( a, b );
	}

	//????????°??????????????????????????????????????????
	bool same( T a, T b ) {
		return find( M[a] ) == find( M[b] );
	}

	//????????°????????????????????°?????????
	long long int group() {
		set<long long int >S;
		for( long long int i = 0; i < V.size(); i++ ) {
			S.insert( find( V[i] ) );
		}
		return S.size();
	}

	//??°?????????????±???????????????°?????????
	long long int count( T a ) {
		return C[find( M[a] )];
	}

private:
	vector<long long int>
		C, V, rank;
	map < T, long long int>M;
	long long int size;

	//?\?????????§?????????
	long long int find( long long int x ) {
		if( V[x] == x )return x;
		else return V[x] = find( V[x] );
	}
};

int main() {
	UF<long long int> uf;
	long long int N, Q;
	cin >> N >> Q;
	for( size_t i = 0; i < N; i++ ) {
		uf.push( i );
	}
	for( size_t i = 0; i < Q; i++ ) {
		int com, x, y;
		cin >> com >> x >> y;
		if( com == 0 ) {
			uf.unite( x, y );
		} else {
			if( uf.same( x, y ) ) {
				cout << 1 << endl;
			} else {
				cout << 0 << endl;
			}
		}
	}
}