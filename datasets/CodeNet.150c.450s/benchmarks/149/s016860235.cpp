#include <vector>
#include <iostream>

class Union_Find {
private:
    std::vector<int> par;
    std::vector<int> rank;

public:
    Union_Find(int n) { // ?????????: O(n)
	par  = std::vector<int>(n);
	rank = std::vector<int>(n);
	for(int i=0; i<n; i++) {
	    par[i]  = i;
	    rank[0] = 0;
	}
    }

    int root(int x) { // ??¨??????????±???????: O(?±(n)) 
	if(par[x] == x)
	    return x;
	return par[x] = root(par[x]); // ??????????????????????????????????????????
    }

    void unite(int x, int y) { // x,y????????????????????????: O(?±(n)) 
	x = root(x);
	y = root(y);
	if( x == y ) return;

	if( rank[x] < rank[y] )
	    par[x] = y;
	else {
	    par[y] = x;
	    if( rank[x] == rank[y] ) rank[x]++;
	}
    }

    bool same(int x, int y) { //x,y??????????????????????????????????????????: O(?±(n)) 
	return root(x) == root(y);
    }
};

int main() {

    int n,q;
    std::cin >> n >> q;

    Union_Find uf(n);
    for(int i=0; i<q; i++) {

	int c,x,y;
	std::cin >> c >> x >> y;

	if(c==0)
	    uf.unite(x,y);
	else
	    std::cout << uf.same(x,y) << std::endl;
    }

}

    