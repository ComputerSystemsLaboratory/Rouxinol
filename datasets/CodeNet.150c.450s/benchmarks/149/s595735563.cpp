#define SORT(v) sort(v.begin(), v.end())
#include <iostream>
#include <map>
#include <vector>
#include <queue>
#include <stack>
#include <cstdlib>
#include <algorithm>
#include <cstdarg>
#include <cstdio>
#include <numeric>

// #include "ane.cpp"

#define INF (int)1e9
#define INFLL (long long)1e18
#define NMAX 200
#define MMAX 200
#define MOD 100000
using namespace std;

// ??????????????¢??????????????¨db_printf()??????????????????
#define DEBUG

//
//  ???????????????
//

// ????????????????????¨????????¢???
typedef pair<int, int> p;
typedef long long ll;


// ???????????°??¨printf
void db_printf(const char* format, ...){
    #ifndef DEBUG
    return;
    #endif
    va_list arg;
    va_start(arg, format);
    vprintf(format, arg);  // ????????????????????????
    va_end(arg);
}

// n?¬??????????????????????????¬¬????????°???????????????????????¨???????????????????????????
template<typename A, size_t N, typename T>
void Fill(A (&array)[N], const T &val){
    std::fill( (T*)array, (T*)(array+N), val );
}

// Union-Find Tree
class UnionFindTree{
    struct node{
        int par;
    };
    std::vector<node> T;

    public:
    void init(int num){
        T.resize(num+1);    // ignore T[0]
        for (int i = 1; i <= num; ++i)
        {
            T[i].par = i;
        }
    }
    void unite(int x, int y){
        T[find(y)].par = find(x);
    }
    int find(int x){
        if (T[x].par == x) return x;
        else return T[x].par = find(T[x].par);
    }
    bool same(int x, int y){
        return find(x) == find(y);
    }
};

//
// ?????????????????????
//


ll N,M,K,A,B,C,D,E;
int dp[NMAX][MMAX] = {};
UnionFindTree uft;

static const int di[] = {-1, 0, 1, -1, 1, -1, 0, 1};
static const int dj[] = {-1, -1, -1, 0, 0, 1, 1, 1};

ll ans = 0;

void solve(){
    // ?§£?????¢?????´?????????
    uft.init(N);
    for (int i = 0; i < M; ++i)
    {
        int c,x,y;
        scanf("%d%d%d", &c,&x,&y);
        if (c)
        {
            printf("%d\n", (int)(uft.same(x, y)));
        }else{
            uft.unite(x, y);
        }
    }
}
void debug(){
    // ???????????°??¨??????
}
void answer(){
    // ?§£?????????
    // printf("%lld\n", ans);
}
int main(int argc, char const *argv[])
{
    // ??\??????????????????????????????

    // Fill(dp, -1);

    scanf("%lld%lld", &N,&M);
    solve();
    #ifdef DEBUG
    debug();
    #endif
    answer();

    return 0;
}