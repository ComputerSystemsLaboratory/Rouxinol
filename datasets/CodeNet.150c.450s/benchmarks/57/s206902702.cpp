/**
 * ?¨???????

???????????´??° a, b ??¨?????????????????? op ?????????????????§???a op b
????¨??????????????????°?????????????????????????????????????????????????????? op
??????"+"(???)???"-"(???)???"*"(???)???"/"(???)???????????¨?????????????????§????????????????????´??????????°???°?????\??????????????¨????????????????¨????????????¨????????????

Input
??\???????????°????????????????????????????§???????????????????????????????????????????????????¢????????\????????¨????????§??????

a op b

op ??? '?' ?????¨??? ??\?????????????????????????????????????????±???????????????????????£????????????????????????

Output
?????????????????????????????????????¨??????????????????????????????????????????????

Constraints
0 ??? a, b ??? 20000
0 ?????????????????????????????????????????¨?????????????????????
Sample Input
1 + 2
56 - 18
13 * 2
100 / 10
27 + 81
0 ? 0
Sample Output
3
38
26
10
108

 */

#include <functional>
#include <iostream>
#include <sstream>
#include <unordered_map>

int main(int argc, char const *argv[]) {
  unsigned int a, b;
  a = b = 0;
  std::string op;
  bool IsValid = true;
  const static std::unordered_map<
      std::string, std::function<int(unsigned int, unsigned int)>>
      Functions = {{"+",
                    [](unsigned int a, unsigned int b) -> int {
                      return a + b;
                    }},
                   {"-",
                    [](unsigned int a, unsigned int b) -> int {
                      return a - b;
                    }},
                   {"*",
                    [](unsigned int a, unsigned int b) -> int {
                      return a * b;
                    }},
                   {"/", [](unsigned int a, unsigned int b) -> int {
                      return a / b;
                    }}};

  while (true) {
    while (true) {
      std::string Param;

      getline(std::cin, Param);
      std::istringstream iss(Param);
      iss >> a >> op >> b;
      IsValid = true;

      if (a > 20000 || b > 20000) {
        std::cout << "Error: 0 <= a, b <= 20000" << std::endl;
        IsValid = false;
      }
      if (!(op == "+" || op == "-" || op == "*" || op == "/" || op == "?")) {
        std::cout << "Error: op == +, -, *, /, ?" << std::endl;
        IsValid = false;
      }
      if (IsValid == true) {
        break;
      }
    }

    if (op != "?") {
      auto it = Functions.find(op);
      if (it != Functions.end()) {
        std::cout << it->second(a, b) << std::endl;
      } else {
        std::cout << "not found" << std::endl;
      }
    } else {
      break;
    }
  }
  return 0;
}