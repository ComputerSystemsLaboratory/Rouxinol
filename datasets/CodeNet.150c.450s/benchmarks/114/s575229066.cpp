#include <iostream>
#include <utility>
#include <string>
#include <algorithm>

using namespace std;


int P[10010]; // 0 ?????? 10000 ?????§????????????????????±?????????
void init(int N) { // ????????? ??????????????¨???????????????????????????
  for (int i=0; i<=N; ++i) P[i] = i;
  // ??¨: ????????? [0,N-1] ????????? [1,N] ?????????????????????
  // ???????????§???????????§???????????????????????§??? [0,N] ???????????¨??????
}
int root(int a) { // a ??? root(??£??¨???) ????±???????
  if (P[a] == a) return a; // a ??? root
  return (P[a] = root(P[a])); // a ????????? root ????±???????a ????????¨??????
}
bool is_same_set(int a, int b) { // a ??¨ b ???????????°?????????????±???????????
  return root(a) == root(b);
}
void unite(int a, int b) { // a ??¨ b ???????????°?????????????????¨??????
  P[root(a)] = root(b);
}


int N=0;
int A[100+10][100+10] = {0};

int cost[10100] = {0};
int src[10100] = {0};
int dst[10100] = {0};

pair<int,int> c_n[10100];



int main() {
  cin >> N;
  init(N+10);
  
  int k=0;
  for(int j=0;j<N;++j){
    for(int i=0;i<N;++i){
      cin >> A[i][j];
      //cout << A[i][j] << "|";
      if (A[i][j] != -1){
	cost[k] = A[i][j];
	src[k] = i;
	dst[k] = j;
	c_n[k] = make_pair(cost[k],k);
	++k;
      }
    }
    //cout << endl;
  }


  sort(c_n, c_n+k);

  

  int num = 0;
  int sum = 0;
  for(int i=0;i<k;++i){
    num = c_n[i].second;
    if(is_same_set(src[num], dst[num]) == 0){
      unite(src[num], dst[num]);
      sum += cost[num];
      //cout << num << " " << sum << endl;
    }
  }
  cout << sum << endl;
}