#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<cstdio>
#include<string>
#include<algorithm>
#include<cmath>
using namespace std;

#define REP(i,n) for(int i=0;(i)<(n);(i)++)

static const int INFTY = (1 << 29);
static const int WHITE = 0; //?????¢?´¢
static const int GRAY = 1; //??¢?´¢??????
static const int BLACK = 2; //?¨??????????

int n, M[101][101];

void dijkstra(void) {
	int dist[101]; //?§????????????????i????§????????????????????????????
	int color[101]; //?¨??????¶???(???or??°or???)

	//?????????????????§?????????????¨??????¶???????????§?????????
	REP(i, n) {
		dist[i] = INFTY;
		color[i] = WHITE;
	}

	dist[0] = 0; //?§????0??????0?????§???????????????0
	color[0] = GRAY; //0?????¢?´¢??????	

	//?????¢?´¢???????????????????????????????°??????????????§????????????????????????´??°????????????
	int minCost;
	while (true) {
		minCost = INFTY; //????°??????????????????????
		int minNode = -1; //????°?????????????????????????????????????
		REP(i, n) {
			if (minCost > dist[i] && color[i] != BLACK) {
				minNode = i;
				minCost = dist[i];
			}
		}
		if (minNode == -1) break; //-1???????????¨???????????¨????????????????????????????????£?????¨???????????¨

		color[minNode] = BLACK; //????°??????????????????????????§??????????????¨???????????????????

		//??¢?´¢????????????????????????????????´??°??????
		REP(v, n) {
			if (color[v] != BLACK && M[minNode][v] != INFTY) {
				if (dist[v] > dist[minNode] + M[minNode][v]) {
					dist[v] = dist[minNode] + M[minNode][v];
					color[v] = GRAY;
				}
			}
		}
	}
	
	REP(i, n) {
		cout << i << " " << (dist[i] == INFTY ? -1 : dist[i]) << endl;
	}

}

int main() {
	cin >> n;

	//??£??\???????????????????????§?????????
	REP(i, n) {
		REP(j, n) {
			M[i][j] = INFTY;
		}
	}

	//??£??\??????????????????
	int u, k, v, c;
	REP(i, n) {
		cin >> u >> k;
		REP(j, k) {
			cin >> v >> c;
			M[u][v] = c;
		}
	}

	dijkstra();

	
	return 0;
}