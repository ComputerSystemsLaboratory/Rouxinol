#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <functional>
#include <utility>
#include <tuple>
#include <cctype>
using namespace std;
#define INF 0x3f3f3f3f
#define INFLL 0x3f3f3f3f3f3f3f3fLL
#define MOD 1000000007
#define mp make_pair
#define mt make_tuple
#define pb push_back
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pint;
typedef pair<ll,ll> pll;
typedef tuple<int,int,int> tint;
typedef vector<int> vint;
typedef vector<ll> vll;
int dx[8]={0,0,-1,1,1,1,-1,-1};
int dy[8]={-1,1,0,0,1,-1,1,-1};
const int SIZE=100050;
const int MAX=50;
//???????????§???????????¬
int main(){
	int N,M,r;
	cin>>N>>M>>r;
	//???????????±
	vll s,t,c;
	//???????????¢
	vll dist;
	//???????????¢??????????????????
	//????????????INF?????\???????????¨????§??????????0???
	for(int i=0;i<N;i++){
		dist.pb(INFLL);
	}
	dist[r]=0;
	for(int i=0;i<M;i++){
		ll x,y,z;
		cin>>x>>y>>z;
		//x--,y--;
		s.pb(x);
		t.pb(y);
		c.pb(z);
	}
	//???????????¢?????´??°???N-1?????????
	for(int loop=0;loop<N-1;loop++){
		for(int i=0;i<M;i++){
			if(dist[s[i]]==INFLL)
				continue;
			if(dist[t[i]]>dist[s[i]]+c[i]){
				dist[t[i]]=dist[s[i]]+c[i];
			}
		}
	}
	//??????????????????????????????????????????
	vector<bool> negative;
	for(int i=0;i<N;i++){
		negative.pb(0);
	}
	//???????????¢?????´??°???N?????°?????????
	//????????§??´??°???????????¨???????????¨????????????????????¨???????????¨?????????
	//??´??°??????????????????negative???true???
	for(int loop=0;loop<N;loop++){
		for(int i=0;i<M;i++){
			if(dist[s[i]]==INFLL)
				continue;
			if(dist[t[i]]>dist[s[i]]+c[i]){
				dist[t[i]]=dist[s[i]]+c[i];
				negative[t[i]]=1;
			}
			if(negative[s[i]]==1){
				negative[t[i]]=1;
			}
		}
	}

	for(int i=0;i<N;i++)
		if(negative[i]==1){
			cout<<"NEGATIVE CYCLE"<<endl;
			return 0;
		}
	for(int i=0;i<N;i++){
		if(dist[i]==INFLL)
			cout<<"INF"<<endl;
		else
			cout<<dist[i]<<endl;
	}
	return 0;
}