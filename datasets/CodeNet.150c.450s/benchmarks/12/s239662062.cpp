#include <stdio.h>
#include <vector>
#include <list>
#include <map>
#include <array>
#include <memory>
#include <string>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <unordered_map>
#include <stdexcept>


using std::string;
using std::vector;


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// util
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

std::vector<std::string> split(const std::string& input, char delimiter)
{
    std::istringstream stream(input);

    std::string field;
    std::vector<std::string> result;
    while (std::getline(stream, field, delimiter)) {
        result.push_back(field);
    }
    return result;
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// user func
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void printList(const vector<int>& list) {
    // print
    for(int i = 0; i < list.size(); i++){
        printf(" %d", list[i]);
    }
    printf("\n");
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// logic
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void solve() {
    // CompleteBinaryTree
    int n;
    scanf("%d", &n);
    vector<int> tree(n+1);
    for(int i = 1; i <= n; i++){
        int v;
        scanf("%d", &v);
        tree[i] = v;
    }
    for(int i = 1; i <= n; i++){
        printf("node %d: ", i);
        printf("key = %d, ", tree[i]);
        if (1 != i) printf("parent key = %d, ", tree[i/2]);
        if (i * 2 <= n) printf("left key = %d, ", tree[i*2]);
        if (i * 2 + 1 <= n) printf("right key = %d, ", tree[i*2+1]);
        printf("\n");
    }
        
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// main
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main() {
    solve();
    return 0;
}
