// Combinatorial - Longest Increasing Subsequence
// ?§£??¬???????????????????£??????????
// ?§£??¬?????????????????£?????????O(n^2)?????¢?????´????????????????????§???????????\????????????
// ????????????O(NlogN)?????¢?????´?????????????????????????????????????????????????????¨????????????
// ??°?±?????????£??????
// ????????¢?´¢??§?????????????????????????????????????????????accept??????????????£??????
// ?´???????????????????????????§?§£????????¨???????????????????§?????????????????????£??????
#include <iostream>
#include <vector>
#define MAX 100100
#define rep(i,p) for(int i=0;i<p;i++)
#define pb push_back
using namespace std;
int n,temp,length,j;
int LAST[MAX]={0};
std::vector<int> A;

int binary_search (int x, int end) {
  int m,s=1,l=end;
  if (l-s <= 1) {
    if (LAST[1] > x) return 1;
    else return 2;
  }
  while ( l-s > 1) {
    m = (s+l)/2;
    if ( LAST[m] > x ) l = m;
    else s = m;
  }
  if (LAST[s] >= x) return s;
  else return l;
}
int main(){
  cin >> n;
  rep(i,n) {
    cin >> temp;
    A.pb(temp);
  }

  LAST[1] = A.at(0);
  length = 1;

  for (int i=1; i<n; i++) {    
    if (LAST[length] < A.at(i)) {
      length++;
      LAST[length] = A.at(i);
    } else {
      j = binary_search(A.at(i),length);
      LAST[j] = A.at(i);
    }
//    rep(k,length) cout << LAST[k+1] << " ";
 //   cout << endl;
  }
  cout << length << endl;
  return 0;
}