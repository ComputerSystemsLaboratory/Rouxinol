#include<iostream>
#include<vector>
#include<algorithm>

void maxHeapify(std::vector<int> &v, int i, int node_num) {
	int left = i * 2;
	int right = i * 2 + 1;
	int largest = i;
	// ????????????????????????????????§???????????§????????????????????¶
	if (left <= node_num && v[left] > v[i])
		largest = left;
	if (right <= node_num && v[right] > v[largest])
		largest = right;

	if (largest != i) {// i ???????????????????????§????????´???
		std::swap(v[i], v[largest]);
		maxHeapify(v, largest, node_num); // ?????°??????????????????
	}
}

void buildMaxHeap(std::vector<int> &v, int node_num) {
	for (int i = node_num / 2; i >= 1; i--) {
		maxHeapify(v, i, node_num);
	}
}

int main() {
	int node_num;

	std::cin >> node_num;
	std::vector<int> v(node_num + 1);

	for (int i = 1; i <= node_num; i++) {
		int num;
		std::cin >> num;
		v[i] = num;
	}

	buildMaxHeap(v, node_num);

	for (int i = 1;	i <= node_num; i++) {
		std::cout << " " << v[i];
	}
	std::cout << std::endl;
	return 0;
}