#include <iostream>
#include <vector>
using namespace std;

void maxHeapify(vector<int>& A, int i)
{
	int H = A.size() - 1;
	int l = 2 * i;
	int r = 2 * i + 1;
	//????????????????????????????????§???????????§????????????????????¶
	int largest;
	if(l <= H && A[l] > A[i]){
		largest = l;
	}else{
		largest = i;
	}
	if(r <= H && A[r] > A[largest]){//i???????????????????????§????????´???

		largest = r;
	}
	if(largest != i){
		swap(A[i], A[largest]);
		maxHeapify(A, largest); // ?????°??????????????????
	}
}

void buildMaxHeap(vector<int>& A)
{
	int H = A.size() - 1;
	for(int i = H / 2; i >= 1; i--){
		maxHeapify(A, i);
	}
}

void Output(const vector<int>& Heap)
{
	for(int i = 1; i < Heap.size(); i++){
		cout << " " << Heap[i];
	}
	cout << endl;
}

int main()
{
	int H;
	cin >> H;
	vector<int> Heap(H+1);
	for(int i = 0; i < H; i++){
		cin >> Heap[i+1];
	}
	buildMaxHeap(Heap);
	Output(Heap);
	return 0;
}