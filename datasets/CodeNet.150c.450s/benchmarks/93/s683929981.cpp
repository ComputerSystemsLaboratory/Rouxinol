#include<iostream>
using namespace std;

static const int kCaNum = 100000;
typedef struct {
	int iNumber;
	char cType;
}Card;

bool ReserchStable(Card _caCard[], Card _caCardSample[], int _iCardNum) {
	for (int i = 0; i < _iCardNum; i++) {
		if (_caCard[i].cType == _caCardSample[i].cType) continue;
		return false;
	}
	return true;
}

int Partition(Card _caCard[], int _iStart, int _iLast) {
	int iKey = _caCard[_iLast].iNumber;
	int iMinLast = _iStart - 1;

	for (int i = _iStart; i < _iLast ; i++) {
		if (_caCard[i].iNumber > iKey) continue;
		iMinLast++; //iKey???????°?????????????????¢?????????????

		//???????????????
		Card caTemp = _caCard[iMinLast];
		_caCard[iMinLast] = _caCard[i];
		_caCard[i] = caTemp;
	}
	iMinLast++;
	Card caTemp = _caCard[iMinLast];
	_caCard[iMinLast] = _caCard[_iLast];
	_caCard[_iLast] = caTemp;

	return iMinLast;
}

void QuickSort(Card _caCard[], int _iStart, int _iEnd) {
	if (_iStart >= _iEnd) return;

	int iBorder = Partition(_caCard, _iStart, _iEnd);
	QuickSort(_caCard, _iStart, iBorder-1);
	QuickSort(_caCard, iBorder+1, _iEnd);
}

class Merge {
public:
	void mergeSort(Card A[], int left, int right) {
		if (left + 1 >= right) {
			return;
		}
		int mid = (left + right) / 2;
		mergeSort(A, left, mid);
		mergeSort(A, mid, right);
		merge(A, left, mid, right);
	}

private:
	void merge(Card A[], int left, int mid, int right) {
		int numL = mid - left;
		int numR = right - mid;

		//?????§A??????????????´??°???????????§??\?????????????????????????????????
		//?????¬?????\????????????????????????
		Card L[50001];
		Card R[50001];
		for (int i = 0; i < numL; i++) {
			L[i] = A[left + i];
		}
		for (int i = 0; i < numR; i++) {
			R[i] = A[mid + i];
		}
		//??????????????¨????????\???????????????
		L[numL].iNumber = 1000000001;
		R[numR].iNumber = 1000000001;
		int iL = 0;
		int iR = 0;
		for (int j = left; j < right; j++) {
			if (L[iL].iNumber <= R[iR].iNumber) {
				A[j] = L[iL];
				iL++;
			}
			else {
				A[j] = R[iR];
				iR++;
			}
		}
	}
};

//????????????????????´????????????
int main() {
	Card caCard[kCaNum];
	Card caCardSample[kCaNum];
	int iCardNum;
	cin >> iCardNum;
	for (int i = 0; i < iCardNum; i++) {
		int iN; char cT;
		cin >> cT; 
		cin >> iN;
		caCardSample[i].cType = caCard[i].cType = cT;
		caCardSample[i].iNumber = caCard[i].iNumber = iN;
	}
	
	//??´???????????????
	QuickSort(caCard, /*iFirst = */0, /*iLast = */iCardNum-1);

	//?????????????????????????????????????????????????????????
	Merge meMerge;
	meMerge.mergeSort(caCardSample, /*iFirst = */0, /*iFirst = */iCardNum);
		
	//??????????????????????????????
	bool bIsStable = ReserchStable(caCard, caCardSample, iCardNum);

	if (bIsStable)	cout << "Stable"       << endl;
	else					cout << "Not stable" << endl;
	for (int i = 0; i < iCardNum; i++) {
		cout << caCard[i].cType      << " " ;
		cout << caCard[i].iNumber << endl;
	}

	return 0;
}