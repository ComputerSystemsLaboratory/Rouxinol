/**
 * ??????????????????????????£?????????
 * ?????????????????????????????? l[], r[] ????????????????????????????????§??????
 * ??????????????????????????? r[] ??????????´?????????????????????¨????????????????????§??? l[]
 * ??????????????°??????????????°??¨???????????????????????????
 *
 * ???????????????????????????????????´???????????°??? n*(n-1)/2 ??¨??????????????§??¨??????
 * n == 200000 ?????¨???11???????????£??? 32bit ??§????¶?????????????????????§??¨???
 */

#include <vector>
#include <string>
#include <algorithm>
#include <numeric>
#include <functional>
#include <iterator>
#include <limits>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstdint>
#include <cassert>

using namespace std;

#define FOR(i, start, end) for(int i = (start); i < (end); ++i)
#define REP(i, n) FOR(i, 0, n)

void read_problem(vector<int>& ary)
{
    int n;
    scanf("%d\n", &n);

    ary.resize(n);
    REP(i, n) {
        scanf("%d", &ary[i]);
    }
}

uint64_t cnt = 0;

void merge(vector<int>& ary, int start, int mid, int end)
{
    constexpr int INF = numeric_limits<int>::max();

    vector<int> l(ary.begin() + start, ary.begin() + mid);
    vector<int> r(ary.begin() + mid,   ary.begin() + end);
    int n1 = l.size();
    int n2 = r.size();
    l.push_back(INF);
    r.push_back(INF);

    int i = 0;
    int j = 0;
    FOR(k, start, end) {
        if(l[i] <= r[j]) {
            ary[k] = l[i++];
        }
        else {
            cnt += n1 - i;
            ary[k] = r[j++];
        }
    }
}

void mergesort(vector<int>& ary, int start, int end)
{
    if(end - start >= 2) {
        int mid = (start + end) / 2;
        mergesort(ary, start, mid);
        mergesort(ary, mid,   end);
        merge(ary, start, mid, end);
    }
}

int main()
{
    vector<int> ary;
    read_problem(ary);

    mergesort(ary, 0, ary.size());

    printf("%lu\n", cnt);

    return 0;
}