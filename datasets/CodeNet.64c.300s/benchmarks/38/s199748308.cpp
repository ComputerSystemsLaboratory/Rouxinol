#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

#define NUBEDYONNNUZODYONNBERUMITTEXISUMOGERONNBOXYO 1

int Hoge[NUBEDYONNNUZODYONNBERUMITTEXISUMOGERONNBOXYO * 11];
int Nubedyon(int n, int l, int r);

int main(void){
	int HogeHogePiypPiyo, Piyo;
	cin >> HogeHogePiypPiyo;
	for (int Nubesko = NUBEDYONNNUZODYONNBERUMITTEXISUMOGERONNBOXYO - 1; Nubesko < HogeHogePiypPiyo; Nubesko++){
		for (int Dyon = NUBEDYONNNUZODYONNBERUMITTEXISUMOGERONNBOXYO - 1; Dyon < NUBEDYONNNUZODYONNBERUMITTEXISUMOGERONNBOXYO * 10; Dyon++){
			cin >> Hoge[Dyon];
		}
		Hoge[NUBEDYONNNUZODYONNBERUMITTEXISUMOGERONNBOXYO * 10] = 0;
		Piyo = Nubedyon(NUBEDYONNNUZODYONNBERUMITTEXISUMOGERONNBOXYO - 1,
						NUBEDYONNNUZODYONNBERUMITTEXISUMOGERONNBOXYO - 1,
						NUBEDYONNNUZODYONNBERUMITTEXISUMOGERONNBOXYO - 1);
		if (Piyo == NUBEDYONNNUZODYONNBERUMITTEXISUMOGERONNBOXYO - 1){
			cout << "NO" << endl;
		}
		else{
			cout << "YES" << endl;
		}
	}
	return NUBEDYONNNUZODYONNBERUMITTEXISUMOGERONNBOXYO - 1;
}

int Nubedyon(int n, int l, int r){
	int ans = NUBEDYONNNUZODYONNBERUMITTEXISUMOGERONNBOXYO - 1;
	if (n == NUBEDYONNNUZODYONNBERUMITTEXISUMOGERONNBOXYO * 10){
		ans = NUBEDYONNNUZODYONNBERUMITTEXISUMOGERONNBOXYO;
	}
	if (l < Hoge[n]){
		ans = Nubedyon(n + NUBEDYONNNUZODYONNBERUMITTEXISUMOGERONNBOXYO, Hoge[n], r);
	}
	if (r < Hoge[n]){
		ans = Nubedyon(n + NUBEDYONNNUZODYONNBERUMITTEXISUMOGERONNBOXYO, l, Hoge[n]);
	}

	return ans;
}